/*
 * kabuステーションAPI
 * # 定義情報   REST APIのコード一覧、エンドポイントは下記リンク参照     - [REST APIコード一覧](../ptal/error.html)
 *
 * OpenAPI spec version: 1.5
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ErrorResponse;
import io.swagger.client.model.RegistSuccess;
import io.swagger.client.model.RequestRegister;
import io.swagger.client.model.RequestUnregister;
import io.swagger.client.model.UnregisterAllSuccess;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RegisterApi {
    private ApiClient apiClient;

    public RegisterApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RegisterApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for registerPut
     * @param body 登録する銘柄のリスト (required)
     * @param X_API_KEY トークン発行メソッドで取得した文字列 (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call registerPutCall(RequestRegister body, String X_API_KEY, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/register";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (X_API_KEY != null)
        localVarHeaderParams.put("X-API-KEY", apiClient.parameterToString(X_API_KEY));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call registerPutValidateBeforeCall(RequestRegister body, String X_API_KEY, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling registerPut(Async)");
        }
        // verify the required parameter 'X_API_KEY' is set
        if (X_API_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API_KEY' when calling registerPut(Async)");
        }
        
        com.squareup.okhttp.Call call = registerPutCall(body, X_API_KEY, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 銘柄登録
     * PUSH配信する銘柄を登録します。&lt;br&gt; API登録銘柄リストを開くには、kabuステーションAPIインジケーターを右クリックし「API登録銘柄リスト」を選択してください。
     * @param body 登録する銘柄のリスト (required)
     * @param X_API_KEY トークン発行メソッドで取得した文字列 (required)
     * @return RegistSuccess
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RegistSuccess registerPut(RequestRegister body, String X_API_KEY) throws ApiException {
        ApiResponse<RegistSuccess> resp = registerPutWithHttpInfo(body, X_API_KEY);
        return resp.getData();
    }

    /**
     * 銘柄登録
     * PUSH配信する銘柄を登録します。&lt;br&gt; API登録銘柄リストを開くには、kabuステーションAPIインジケーターを右クリックし「API登録銘柄リスト」を選択してください。
     * @param body 登録する銘柄のリスト (required)
     * @param X_API_KEY トークン発行メソッドで取得した文字列 (required)
     * @return ApiResponse&lt;RegistSuccess&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RegistSuccess> registerPutWithHttpInfo(RequestRegister body, String X_API_KEY) throws ApiException {
        com.squareup.okhttp.Call call = registerPutValidateBeforeCall(body, X_API_KEY, null, null);
        Type localVarReturnType = new TypeToken<RegistSuccess>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 銘柄登録 (asynchronously)
     * PUSH配信する銘柄を登録します。&lt;br&gt; API登録銘柄リストを開くには、kabuステーションAPIインジケーターを右クリックし「API登録銘柄リスト」を選択してください。
     * @param body 登録する銘柄のリスト (required)
     * @param X_API_KEY トークン発行メソッドで取得した文字列 (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call registerPutAsync(RequestRegister body, String X_API_KEY, final ApiCallback<RegistSuccess> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = registerPutValidateBeforeCall(body, X_API_KEY, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RegistSuccess>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for unregisterAllPut
     * @param X_API_KEY トークン発行メソッドで取得した文字列 (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call unregisterAllPutCall(String X_API_KEY, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/unregister/all";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (X_API_KEY != null)
        localVarHeaderParams.put("X-API-KEY", apiClient.parameterToString(X_API_KEY));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call unregisterAllPutValidateBeforeCall(String X_API_KEY, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'X_API_KEY' is set
        if (X_API_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API_KEY' when calling unregisterAllPut(Async)");
        }
        
        com.squareup.okhttp.Call call = unregisterAllPutCall(X_API_KEY, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 銘柄登録全解除
     * API登録銘柄リストに登録されている銘柄をすべて解除します
     * @param X_API_KEY トークン発行メソッドで取得した文字列 (required)
     * @return UnregisterAllSuccess
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UnregisterAllSuccess unregisterAllPut(String X_API_KEY) throws ApiException {
        ApiResponse<UnregisterAllSuccess> resp = unregisterAllPutWithHttpInfo(X_API_KEY);
        return resp.getData();
    }

    /**
     * 銘柄登録全解除
     * API登録銘柄リストに登録されている銘柄をすべて解除します
     * @param X_API_KEY トークン発行メソッドで取得した文字列 (required)
     * @return ApiResponse&lt;UnregisterAllSuccess&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UnregisterAllSuccess> unregisterAllPutWithHttpInfo(String X_API_KEY) throws ApiException {
        com.squareup.okhttp.Call call = unregisterAllPutValidateBeforeCall(X_API_KEY, null, null);
        Type localVarReturnType = new TypeToken<UnregisterAllSuccess>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 銘柄登録全解除 (asynchronously)
     * API登録銘柄リストに登録されている銘柄をすべて解除します
     * @param X_API_KEY トークン発行メソッドで取得した文字列 (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call unregisterAllPutAsync(String X_API_KEY, final ApiCallback<UnregisterAllSuccess> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = unregisterAllPutValidateBeforeCall(X_API_KEY, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UnregisterAllSuccess>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for unregisterPut
     * @param body 登録解除する銘柄のリスト (required)
     * @param X_API_KEY トークン発行メソッドで取得した文字列 (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call unregisterPutCall(RequestUnregister body, String X_API_KEY, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/unregister";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (X_API_KEY != null)
        localVarHeaderParams.put("X-API-KEY", apiClient.parameterToString(X_API_KEY));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call unregisterPutValidateBeforeCall(RequestUnregister body, String X_API_KEY, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling unregisterPut(Async)");
        }
        // verify the required parameter 'X_API_KEY' is set
        if (X_API_KEY == null) {
            throw new ApiException("Missing the required parameter 'X_API_KEY' when calling unregisterPut(Async)");
        }
        
        com.squareup.okhttp.Call call = unregisterPutCall(body, X_API_KEY, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 銘柄登録解除
     * API登録銘柄リストに登録されている銘柄を解除します
     * @param body 登録解除する銘柄のリスト (required)
     * @param X_API_KEY トークン発行メソッドで取得した文字列 (required)
     * @return RegistSuccess
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RegistSuccess unregisterPut(RequestUnregister body, String X_API_KEY) throws ApiException {
        ApiResponse<RegistSuccess> resp = unregisterPutWithHttpInfo(body, X_API_KEY);
        return resp.getData();
    }

    /**
     * 銘柄登録解除
     * API登録銘柄リストに登録されている銘柄を解除します
     * @param body 登録解除する銘柄のリスト (required)
     * @param X_API_KEY トークン発行メソッドで取得した文字列 (required)
     * @return ApiResponse&lt;RegistSuccess&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RegistSuccess> unregisterPutWithHttpInfo(RequestUnregister body, String X_API_KEY) throws ApiException {
        com.squareup.okhttp.Call call = unregisterPutValidateBeforeCall(body, X_API_KEY, null, null);
        Type localVarReturnType = new TypeToken<RegistSuccess>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 銘柄登録解除 (asynchronously)
     * API登録銘柄リストに登録されている銘柄を解除します
     * @param body 登録解除する銘柄のリスト (required)
     * @param X_API_KEY トークン発行メソッドで取得した文字列 (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call unregisterPutAsync(RequestUnregister body, String X_API_KEY, final ApiCallback<RegistSuccess> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = unregisterPutValidateBeforeCall(body, X_API_KEY, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RegistSuccess>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
